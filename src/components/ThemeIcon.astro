---

---

<button id="themeToggle">
  <p class="auto-theme">A</p>
  <svg width="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path
      class="sun"
      fill-rule="evenodd"
      d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
    ></path>
    <path
      class="moon"
      fill-rule="evenodd"
      d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
    ></path>
  </svg>
</button>

<style>
  #themeToggle {
    border: 0;
    background: none;
  }
  .sun {
    fill: transparent;
  }
  .moon {
    fill: transparent;
  }
  .auto-theme {
    display: none;
  }

  :global([data-theme-preference='system']) .auto-theme {
    display: block;
  }
  :global([data-theme-preference='light']) .sun {
    fill: black;
  }
  :global([data-theme-preference='dark']) .moon {
    fill: white;
  }
</style>

<script is:inline>
  // @ts-check

  const element = document.documentElement;

  /** @returns {'dark' | 'light' | 'system'} */
  const getThemePreference = () => {
    const localStorageTheme = localStorage?.getItem('theme') ?? '';
    if (['dark', 'light'].includes(localStorageTheme)) {
      return /** @type {'dark' | 'light'} */ (localStorageTheme);
    }
    return 'system';
  };

  /**
   * @returns {'dark' | 'light'}
   */
  const getTheme = () => {
    const preference = getThemePreference();

    if (preference === 'system') {
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark';
      }
      return 'light';
    }

    return preference;
  };

  const modes = [
    {
      key: 'light',
      setState: () => window.localStorage.setItem('theme', 'light'),
    },
    {
      key: 'dark',
      setState: () => window.localStorage.setItem('theme', 'dark'),
    },
    { key: 'system', setState: () => window.localStorage.removeItem('theme') },
  ];

  const applicators = {
    light() {
      element.dataset.theme = 'light';
    },
    dark() {
      element.dataset.theme = 'dark';
    },
  };

  // Applying the current preference
  applicators[getTheme()]();
  element.dataset.themePreference = getThemePreference();

  const handleToggleClick = () => {
    const preference = getThemePreference();
    const currentIdx = modes.findIndex((mode) => mode.key === preference);
    const nextMode = modes[(currentIdx + 1) % modes.length];

    nextMode.setState();
    applicators[getTheme()]();
    element.dataset.themePreference = getThemePreference();
  };

  document
    .getElementById('themeToggle')
    ?.addEventListener('click', handleToggleClick);
</script>
